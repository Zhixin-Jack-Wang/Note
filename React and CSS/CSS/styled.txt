1.pass props
const Button = styled.button`
  background: ${props => props.primary ? "palevioletred" : "white"};
`;

<Button primary></Button>


2.inheritance
const TomatoButton = styled(Button)`
  color: tomato;
  border-color: tomato;
`;


3.polymorphic prop(as), change button to a tag using as, can also change to TomatoButton(ie. as={TomatoButton})
<Button as="a" href="/">Link with Button styles</Button>



4.Ampersand
const Thing = styled.div.attrs((/* props */) => ({ tabIndex: 0 }))`
  color: blue;
  &:hover {
    color: red; // <Thing> when hovered
  }
  & ~ & {
    background: tomato; // <Thing> as a sibling of <Thing>, but maybe not directly next to it
  }
  & + & {
    background: lime; // <Thing> next to <Thing>
  }
  &.something {
    background: orange; // <Thing> tagged with an additional CSS class ".something"
  }
  .something-else & {
    border: 1px solid; // <Thing> inside another element labeled ".something-else"
  }
`


5. attach more props
const StyledTest = styled.section.attrs(props => ({
  mg: props.mg || "5rem"
  ...
}))`
  background-color: ${props => (props.primary ? "red" : "black")};
  margin: ${props => props.mg};
`;



6.animation
// Create the keyframes
const rotate =  `
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;

// Here we create a component that will rotate everything we pass in over two seconds
const Rotate = styled.div`
  display: inline-block;
  animation: ${rotate} 2s linear infinite;
  padding: 2rem 1rem;
  font-size: 1.2rem;
`;
render(
  <Rotate>&lt; ðŸ’… &gt;</Rotate>
);